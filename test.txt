# CHATTY AI MODIFICATIONS FOR FILE-BASED RESPONSES
# Replace the existing methods with these improved versions

# 1. ADD NEW FILE CONSTANTS (Add near the top with other file constants around line 56)
JOKES_FILE = "jokes.txt"
FUN_FACTS_FILE = "fun_facts.txt"
BORED_RESPONSES_GENERIC_FILE = "bored_responses_generic.txt"
WAITING_RESPONSES_GENERIC_FILE = "waiting_responses_generic.txt"

# 2. ADD NEW INSTANCE VARIABLES (Add to __init__ method around line 162)
# Add these to the response lists section:
self.fun_facts = []
self.bored_responses_generic = []
self.waiting_responses_generic = []

# 3. UPDATE load_response_files METHOD (Add these sections to load the new files)
def load_response_files(self):
    """Load all response files from disk"""
    try:
        # Existing code for jokes
        with open(JOKES_FILE, 'r') as f:
            self.jokes = [line.strip() for line in f if line.strip()]
        
        # ADD: Load fun facts
        try:
            with open(FUN_FACTS_FILE, 'r') as f:
                self.fun_facts = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_fun_facts()
        
        # Existing code for other responses...
        
        # ADD: Load generic bored responses
        try:
            with open(BORED_RESPONSES_GENERIC_FILE, 'r') as f:
                self.bored_responses_generic = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_bored_responses_generic()
        
        # ADD: Load generic waiting responses  
        try:
            with open(WAITING_RESPONSES_GENERIC_FILE, 'r') as f:
                self.waiting_responses_generic = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_waiting_responses_generic()
        
        self.emit_log("Response files loaded successfully", 'success')
        return True
    except FileNotFoundError as e:
        self.emit_log(f"Response file not found: {e}", 'error')
        self.create_default_responses()
        return False

# 4. ADD NEW DEFAULT FILE CREATION METHODS
def create_default_fun_facts(self):
    """Create default fun facts file"""
    default_facts = [
        "Did you know that octopuses have three hearts and blue blood?",
        "Honey never spoils - archaeologists have found edible honey in ancient Egyptian tombs!",
        "A group of flamingos is called a 'flamboyance'.",
        "The human brain uses about 20% of the body's total energy.",
        "Bananas are berries, but strawberries aren't!",
        "There are more possible games of chess than atoms in the observable universe.",
        "Wombat poop is cube-shaped to prevent it from rolling away.",
        "A cloud can weigh more than a million pounds."
    ]
    
    try:
        with open(FUN_FACTS_FILE, 'w') as f:
            for fact in default_facts:
                f.write(fact + '\n')
        self.fun_facts = default_facts
    except Exception as e:
        self.fun_facts = default_facts

def create_default_bored_responses_generic(self):
    """Create default generic bored responses file"""
    default_bored_generic = [
        "I'm getting a bit bored waiting here",
        "Still hanging around here waiting",
        "I'm patiently waiting for commands",
        "I am feeling restless waiting here",
        "Still here waiting to help"
    ]
    
    try:
        with open(BORED_RESPONSES_GENERIC_FILE, 'w') as f:
            for response in default_bored_generic:
                f.write(response + '\n')
        self.bored_responses_generic = default_bored_generic
    except Exception as e:
        self.bored_responses_generic = default_bored_generic

def create_default_waiting_responses_generic(self):
    """Create default generic waiting responses file"""
    default_waiting_generic = [
        "I am still around if you need me",
        "Still here waiting to assist",
        "Patiently waiting for your next request",
        "I'm here whenever you need help",
        "Standing by for assistance"
    ]
    
    try:
        with open(WAITING_RESPONSES_GENERIC_FILE, 'w') as f:
            for response in default_waiting_generic:
                f.write(response + '\n')
        self.waiting_responses_generic = default_waiting_generic
    except Exception as e:
        self.waiting_responses_generic = default_waiting_generic

# 5. REPLACE get_llm_joke METHOD (Replace entire method)
def get_file_joke(self):
    """Get a random joke from jokes.txt file"""
    try:
        if self.jokes:
            joke = random.choice(self.jokes)
            self.emit_log(f"Selected joke from file: {joke[:50]}...", 'debug')
            return joke
        else:
            return "Why don't scientists trust atoms? Because they make up everything!"
    except Exception as e:
        self.emit_log(f"File joke error: {e}", 'error')
        return "Why don't scientists trust atoms? Because they make up everything!"

# 6. REPLACE get_llm_fun_fact METHOD (Replace entire method)
def get_file_fun_fact(self):
    """Get a random fun fact from fun_facts.txt file"""
    try:
        if self.fun_facts:
            fact = random.choice(self.fun_facts)
            self.emit_log(f"Selected fun fact from file: {fact[:50]}...", 'debug')
            return fact
        else:
            return "Did you know that octopuses have three hearts and blue blood?"
    except Exception as e:
        self.emit_log(f"File fun fact error: {e}", 'error')
        return "Did you know that octopuses have three hearts and blue blood?"

# 7. REPLACE check_for_bored_response METHOD (Complete replacement)
def check_for_bored_response(self, name):
    """Check if it's time to give a bored response with joke or fun fact from files"""
    if not self.wake_word_active or not self.last_bored_response_time:
        return False
    
    current_time = time.time()
    time_since_bored = current_time - self.last_bored_response_time
    
    if time_since_bored >= BORED_RESPONSE_INTERVAL:
        # Add 1-second delay before response
        time.sleep(1.0)
        
        # Determine if this is a known person or stranger
        is_known_person = name and name != "Unknown"
        
        if self.bored_cycle == 0:
            # Give bored response + joke from file
            if is_known_person:
                # Use personalized bored responses
                if self.bored_responses:
                    bored_template = random.choice(self.bored_responses)
                    bored_msg = bored_template.replace("{name}", name)
                else:
                    bored_msg = f"Hey {name}, I'm getting a bit bored waiting here"
            else:
                # Use generic bored responses for strangers
                if self.bored_responses_generic:
                    bored_msg = random.choice(self.bored_responses_generic)
                else:
                    bored_msg = "I'm getting a bit bored waiting here"
            
            # Get joke from file
            joke = self.get_file_joke()
            
            # Speak the bored message first
            self.speak_text(bored_msg)
            self.emit_conversation(f"üò¥ Bored response: {bored_msg}", 'response')
            
            # Add 1-second pause between messages
            time.sleep(1.0)
            
            # Then tell the joke
            joke_intro = "Let me tell you a joke!"
            self.speak_text(joke_intro)
            time.sleep(0.5)  # Short pause
            self.speak_text(joke)
            self.emit_conversation(f"üòÑ Joke: {joke}", 'response')
            
            self.bored_cycle = 1
            self.emit_log(f"Gave {'known person ' + name if is_known_person else 'stranger'} a bored response with file joke", 'info')
        else:
            # Give waiting response + fun fact from file
            if is_known_person:
                # Use personalized waiting responses
                if self.waiting_responses:
                    waiting_template = random.choice(self.waiting_responses)
                    waiting_msg = waiting_template.replace("{name}", name)
                else:
                    waiting_msg = f"I am still around if you need me, {name}"
            else:
                # Use generic waiting responses for strangers
                if self.waiting_responses_generic:
                    waiting_msg = random.choice(self.waiting_responses_generic)
                else:
                    waiting_msg = "I am still around if you need assistance"
            
            # Get fun fact from file
            fun_fact = self.get_file_fun_fact()
            
            # Speak the waiting message first
            self.speak_text(waiting_msg)
            self.emit_conversation(f"‚è≥ Waiting response: {waiting_msg}", 'response')
            
            # Add 1-second pause between messages
            time.sleep(1.0)
            
            # Then share the fun fact
            fact_intro = "Here's a fun fact for you!"
            self.speak_text(fact_intro)
            time.sleep(0.5)  # Short pause
            self.speak_text(fun_fact)
            self.emit_conversation(f"üí° Fun fact: {fun_fact}", 'response')
            
            self.bored_cycle = 0
            self.emit_log(f"Gave {'known person ' + name if is_known_person else 'stranger'} a waiting response with file fun fact", 'info')
        
        self.last_bored_response_time = current_time
        return True
    
    return False

# 8. UPDATE create_default_responses METHOD (Add the new file creation calls)
def create_default_responses(self):
    """Create all default response files"""
    # Existing default responses...
    self.jokes = ["Why don't scientists trust atoms? Because they make up everything!"]
    self.greeting_responses = ["Hello {name}! It is nice to see you again. How may I help you?"]
    self.listening_responses = ["Yes {name}, I'm listening. What would you like to know?"]
    self.waiting_responses = ["Hey {name}, I am still here if you need anything"]
    self.warning_responses = ["Attention unauthorized person, you are not authorized to access this property. Leave immediately. I am contacting the authorities to report your intrusion."]
    self.bored_responses = ["Hey {name}, I'm getting a bit bored waiting here"]
    self.visitor_greeting_responses = ["Hello. I do not recognize you. Can I be of assistance?"]
    
    # ADD: Create the new file types
    self.create_default_fun_facts()
    self.create_default_bored_responses_generic()
    self.create_default_waiting_responses_generic()

# SUMMARY OF CHANGES:
print("MODIFICATIONS SUMMARY:")
print("1. Added file constants for jokes.txt, fun_facts.txt, and generic response files")
print("2. Added new instance variables for storing file contents")
print("3. Enhanced load_response_files to load the new files")
print("4. Replaced get_llm_joke with get_file_joke (reads from jokes.txt)")
print("5. Replaced get_llm_fun_fact with get_file_fun_fact (reads from fun_facts.txt)")
print("6. Updated check_for_bored_response to use file-based responses with name personalization")
print("7. Added logic to use generic responses for unknown persons")
print("8. Enhanced greeting responses to include detected person's name")

