


I can see two issues to fix:

Issue 1: Status Display Before System Start

The system status should only show "Ready" and "Loaded" after the system starts. The problem is in the get_system_info() method - it's always returning the actual status instead of checking if the system is running.

Issue 2: Sample Rate Error + Time Format

The wake word recording is failing with the same sample rate error we fixed earlier, and the time is showing in 24-hour format instead of 12-hour.

Here are the fixes:

Fix 1 - Update the get_system_info() method:

def get_system_info(self):
    """Get current system performance information"""
    try:
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        
        # Try to get CPU temperature
        try:
            with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
                cpu_temp = int(f.read()) / 1000.0
        except:
            cpu_temp = 0
        
        # GPU temp (if available)
        try:
            result = subprocess.run(['vcgencmd', 'measure_temp'], capture_output=True, text=True)
            if result.returncode == 0:
                gpu_temp = float(result.stdout.split('=')[1].split("'")[0])
            else:
                gpu_temp = 0
        except:
            gpu_temp = 0
        
        # Only show as ready/loaded if system is actually running
        if self.is_running:
            camera_status = self.picam2 is not None
            models_status = self.whisper_model is not None and self.llama_model is not None
            wake_word_status = self.wake_word_active
            current_person = self.current_person if self.current_person else "No Entity Detected"
        else:
            camera_status = False
            models_status = False
            wake_word_status = False
            current_person = "System Offline"
        
        self.system_info = {
            'cpu_percent': cpu_percent,
            'memory_percent': memory.percent,
            'cpu_temp': cpu_temp,
            'gpu_temp': gpu_temp,
            'camera_initialized': camera_status,
            'models_loaded': models_status,
            'wake_word_active': wake_word_status,
            'current_person': current_person
        }
        
        return self.system_info
        
    except Exception as e:
        self.emit_log(f"Error getting system info: {e}", 'error')
        return self.system_info


Fix 2 - Update the record_wake_word_check() method with auto-detection:

def record_wake_word_check(self):
    """Record short audio clip for wake word detection with auto sample rate"""
    try:
        if not self.audio_recording_lock.acquire(blocking=False):
            return False
        
        try:
            # Auto-detect working sample rate (same as user input recording)
            working_sample_rate = None
            for rate in [44100, 48000, 22050, 16000]:
                try:
                    sd.check_input_settings(channels=1, samplerate=rate, dtype='float32')
                    working_sample_rate = rate
                    break
                except:
                    continue
            
            if not working_sample_rate:
                self.emit_log("No compatible sample rate found for wake word", 'error')
                return False
            
            # Record 5 seconds for wake word detection
            audio_data = sd.rec(int(5 * working_sample_rate), 
                              samplerate=working_sample_rate, 
                              channels=CHANNELS, 
                              dtype='float32')
            sd.wait()
            
            # Check if audio contains sound above threshold
            rms = np.sqrt(np.mean(audio_data**2))
            if rms > SILENCE_THRESHOLD * 2:
                # Convert to 16kHz for Whisper if needed
                if working_sample_rate != 16000:
                    from scipy import signal
                    target_length = int(len(audio_data) * 16000 / working_sample_rate)
                    audio_data = signal.resample(audio_data, target_length)
                    save_sample_rate = 16000
                else:
                    save_sample_rate = working_sample_rate
                
                sf.write(WAKE_WORD_AUDIO, audio_data, save_sample_rate)
                self.emit_log(f"Wake word audio saved, RMS: {rms:.4f}", 'debug')
                return True
            else:
                self.emit_log(f"Audio too quiet for wake word, RMS: {rms:.4f}", 'debug')
                return False
                
        finally:
            self.audio_recording_lock.release()
            
    except Exception as e:
        self.emit_log(f"Wake word recording error: {e}", 'error')
        return False


Fix 3 - Update the time format in emit_log() and emit_conversation():

def emit_log(self, message, level='info'):
    """Emit log message to web interface"""
    timestamp = datetime.now().strftime("%I:%M:%S %p")  # 12-hour format with AM/PM
    socketio.emit('log_update', {
        'message': message,
        'type': level,
        'timestamp': timestamp
    })
    
    # Also log to console for debugging
    print(f"[{timestamp}] {message}")

def emit_conversation(self, message, level='info'):
    """Emit conversation message to web interface"""
    timestamp = datetime.now().strftime("%I:%M:%S %p")  # 12-hour format with AM/PM
    socketio.emit('conversation_update', {
        'message': message,
        'type': level,
        'timestamp': timestamp
    })


Apply these three fixes and the issues should be resolved:

Status will only show "Ready/Loaded" after clicking START SYSTEM
Wake word recording will use compatible sample rate
Time will display in 12-hour format (8:47:43 AM instead of 18:07:43)

The wake word detection should now work without the sample rate error.










