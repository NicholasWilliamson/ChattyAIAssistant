Thank you, Claude,

I modified my chatty-ai.service systemd service file as you recommended.

My speak_text(self, text): method in my chatty_ai.py Python script is as follows:

    def speak_text(self, text):
        """Enhanced speak_text method using Piper TTS"""
        if not text:
            return
    
        try:
            # Store the speaking state
            self.currently_speaking = True
            self.speech_start_time = time.time()
        
            # Estimate speech duration (rough calculation)
            # Average speaking rate: ~150 words per minute = 2.5 words per second
            word_count = len(text.split())
            estimated_duration = (word_count / 2.5) + 1.0  # Add 1 second buffer
        
            self.emit_log(f"üîä Speaking: '{text[:50]}...'", 'info')
        
            # Use Piper TTS instead of gTTS
            piper_command = [
                PIPER_EXECUTABLE,
                "--model", VOICE_PATH,
                "--config", CONFIG_PATH,
                "--output_file", RESPONSE_AUDIO
            ]
        
            # Run Piper TTS
            result = subprocess.run(
                piper_command,
                input=text,
                text=True,
                capture_output=True,
                check=True,
                timeout=30
            )
        
            if result.returncode == 0 and os.path.exists(RESPONSE_AUDIO):
                # Play the generated audio file
                with self.audio_recording_lock:
                    subprocess.run(["aplay", RESPONSE_AUDIO], 
                                    check=True, 
                                    capture_output=True,
                                    timeout=estimated_duration + 5)
            
                self.emit_log(f"üéµ Speech completed: '{text[:50]}...'", 'success')
            
                # Clean up the audio file
                try:
                    os.remove(RESPONSE_AUDIO)
                except:
                    pass
            else:
                self.emit_log(f"‚ùå Piper TTS failed to generate audio", 'error')
        
            # Mark speaking as complete
            self.currently_speaking = False
        
        except subprocess.TimeoutExpired:
            self.currently_speaking = False
            self.emit_log(f"‚è∞ TTS timeout for: '{text[:50]}...'", 'error')
        except subprocess.CalledProcessError as e:
            self.currently_speaking = False
            self.emit_log(f"üîß Piper TTS error (exit code {e.returncode}): {e.stderr.decode() if e.stderr else 'Unknown error'}", 'error')
        except Exception as e:
            self.currently_speaking = False
            self.emit_log(f"‚ùå TTS error: {e}", 'error')

I ran: (chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ sudo -u nickspi5 speaker-test -c 2 -t wav

speaker-test 1.2.8

Playback device is default
Stream parameters are 48000Hz, S16_LE, 2 channels
WAV file(s)
Playback open error: -524,Unknown error 524
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ 

I do not want to use espeak at all.








