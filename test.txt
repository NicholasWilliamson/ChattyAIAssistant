2. Fix the Launcher Service Not Starting
The service isn't starting because it's waiting for the wrong target. Let's fix it:

bash sudo nano /etc/systemd/system/chatty-ai-launcher.service


Replace with this corrected version:

ini[Unit]
Description=Chatty AI Launcher - Video and Browser Startup
After=multi-user.target graphical-session.target
Wants=network-online.target

[Service]
Type=simple
User=nickspi5
Group=nickspi5
Environment="DISPLAY=:0"
Environment="XAUTHORITY=/home/nickspi5/.Xauthority"
Environment="HOME=/home/nickspi5"
Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Wait a bit for desktop to be ready
ExecStartPre=/bin/sleep 10

# Run the startup script
ExecStart=/bin/bash /home/nickspi5/Chatty_AI/chatty_ai_startup.sh

# Restart if it fails
Restart=on-failure
RestartSec=10

[Install]
WantedBy=default.target


3. Alternative: Use Autostart (More Reliable for GUI)
Since you're booting to desktop, using the desktop autostart might be more reliable:
bashmkdir -p /home/nickspi5/.config/autostart

cat > /home/nickspi5/.config/autostart/chatty-ai.desktop << 'EOF'
[Desktop Entry]
Type=Application
Name=Chatty AI Launcher
Comment=Launch Chatty AI with intro video
Exec=/bin/bash /home/nickspi5/Chatty_AI/chatty_ai_startup.sh
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
X-GNOME-Autostart-Delay=10
Terminal=false
EOF

chmod +x /home/nickspi5/.config/autostart/chatty-ai.desktop



4. Fix the Startup Script Dependencies

Update your startup script to ensure services start properly:

bashnano /home/nickspi5/Chatty_AI/chatty_ai_startup.sh

Add better service checking:

bash#!/bin/bash
#
# Chatty AI Startup Script
# Plays intro video and launches the web interface
#

# Configuration
VIDEO_PATH="/home/nickspi5/Chatty_AI/Chatty_AI_starting.mp4"
CHATTY_URL="http://localhost:5000"
LOG_FILE="/home/nickspi5/Chatty_AI/logs/startup.log"
STARTUP_DELAY=70
USER="nickspi5"

# Create log directory if it doesn't exist
mkdir -p /home/nickspi5/Chatty_AI/logs

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Start logging
log_message "========================================="
log_message "Chatty AI Startup Sequence Initiated"
log_message "========================================="

# Wait for display to be ready
export DISPLAY=:0
export XAUTHORITY=/home/nickspi5/.Xauthority

# Check for development mode
DEV_MODE="${1:-production}"

# Ensure services are running
log_message "Starting Chatty AI services..."

# Start preloader if not running
if ! systemctl is-active --quiet chatty-ai-preloader.service; then
    log_message "Starting preloader service..."
    systemctl --user start chatty-ai-preloader.service 2>/dev/null || \
    sudo systemctl start chatty-ai-preloader.service
    sleep 5
fi

# Start main service if not running
if ! systemctl is-active --quiet chatty-ai.service; then
    log_message "Starting Chatty AI service..."
    systemctl --user start chatty-ai.service 2>/dev/null || \
    sudo systemctl start chatty-ai.service
    sleep 5
fi

# Check if video file exists and play it
if [ -f "$VIDEO_PATH" ]; then
    log_message "Playing startup video..."
    
    # Play video with default audio (which works)
    cvlc --fullscreen --play-and-exit "$VIDEO_PATH" 2>/dev/null &
    VLC_PID=$!
    log_message "VLC started with PID: $VLC_PID"
else
    log_message "Warning: Video file not found at $VIDEO_PATH"
fi

# Wait for services to stabilize
log_message "Waiting $STARTUP_DELAY seconds for services..."
WAITED=0
while [ $WAITED -lt $STARTUP_DELAY ]; do
    # Check if port 5000 is open
    if [ $WAITED -eq 30 ] && netstat -tuln | grep -q ":5000 "; then
        log_message "Port 5000 is open and ready"
    fi
    sleep 1
    WAITED=$((WAITED + 1))
done

# Kill VLC if still running
if [ -n "$VLC_PID" ] && ps -p $VLC_PID > /dev/null 2>&1; then
    kill $VLC_PID 2>/dev/null
fi

# Launch Chromium
if [ "$DEV_MODE" = "dev" ]; then
    log_message "Launching Chromium in development mode..."
    chromium-browser --start-maximized "$CHATTY_URL" 2>/dev/null &
else
    log_message "Launching Chromium in kiosk mode..."
    chromium-browser \
        --kiosk \
        --noerrdialogs \
        --disable-infobars \
        --start-maximized \
        --disable-translate \
        --disable-features=TranslateUI \
        --disable-component-update \
        "$CHATTY_URL" 2>/dev/null &
fi

CHROMIUM_PID=$!
log_message "Chromium launched with PID: $CHROMIUM_PID"

# Hide mouse cursor
if command -v unclutter &> /dev/null; then
    unclutter -idle 1 -root &
fi

log_message "Startup sequence complete!"
log_message "========================================="

# Keep script running
wait $CHROMIUM_PID


5. Enable Everything Properly

bash# Disable the problematic systemd service
sudo systemctl disable chatty-ai-launcher.service

# Make sure the main services start at boot
sudo systemctl enable chatty-ai-preloader.service
sudo systemctl enable chatty-ai.service

# The autostart desktop file will handle the video and browser launch


6. Test Before Rebooting

bash# Test the startup script manually first
/home/nickspi5/Chatty_AI/chatty_ai_startup.sh dev

# Check the log
tail -f /home/nickspi5/Chatty_AI/logs/startup.log


7. Configure Auto-Login (if not already done)

bashsudo raspi-config
# Select: 1 System Options > S5 Boot / Auto Login > B4 Desktop Autologin
After these changes, when you reboot:

System will boot to desktop with auto-login
Preloader and main services start via systemd
After 10 seconds, the autostart triggers your startup script
Video plays with audio
Browser launches in kiosk mode after 70 seconds

The autostart method is more reliable for GUI applications than systemd services when booting to desktop.

