

3. Fix Camera Display Issue
The video feed endpoint is responding but the camera might not be initializing properly. The issue is likely that the camera thread isn't starting when you click "Initialize".
Check your chatty_ai.py for this issue in the handle_start_system socket event handler. Make sure the camera thread actually starts:
python@self.socketio.on('start_system')
def handle_start_system():
    # ... existing code ...
    
    # After setting up camera, verify it's working
    if self.setup_camera():
        self.emit_log("Camera initialized, starting monitoring thread...", 'info')
        
        # Make sure these are set BEFORE starting threads
        self.system_running = True
        self.monitor_running = True
        
        # Start camera monitoring thread
        self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
        self.camera_thread.start()
        self.emit_log("Camera monitoring thread started", 'success')
        
        # Give camera time to capture first frame
        time.sleep(2)
        
        # Check if frame is being captured
        if self.current_frame is not None:
            self.emit_log("Camera is capturing frames", 'success')
        else:
            self.emit_log("Warning: Camera not capturing frames yet", 'warning')
4. Debug Camera Frame Updates
Add debugging to see if frames are being captured in camera_monitoring_loop:
pythondef camera_monitoring_loop(self):
    """Main camera monitoring loop for web interface"""
    logger.info("Camera monitoring thread started")
    self.emit_log("Camera monitoring thread started", 'success')
    
    frame_count = 0
    while self.system_running and self.monitor_running:
        try:
            if not self.picam2:
                self.emit_log("Camera not initialized in monitoring loop", 'error')
                time.sleep(1)
                continue
                
            frame = self.picam2.capture_array()
            
            # Debug log every 30 frames (1 second at 30fps)
            if frame_count % 30 == 0:
                self.emit_log(f"Captured frame {frame_count}, shape: {frame.shape}", 'debug')
            
            # ... rest of your existing code ...
            
            # Make sure to update self.current_frame
            self.current_frame = display_frame  # This is the important line!
            
            frame_count += 1
5. Quick Test Script
Create a test to verify camera streaming works independently:
bashcat > /home/nickspi5/Chatty_AI/test_camera_stream.py << 'EOF'
#!/usr/bin/env python3
from flask import Flask, Response
import cv2
from picamera2 import Picamera2
import time

app = Flask(__name__)
picam2 = None

def init_camera():
    global picam2
    picam2 = Picamera2()
    picam2.configure(picam2.create_preview_configuration(
        main={"format": 'XRGB8888', "size": (640, 480)}
    ))
    picam2.start()
    time.sleep(2)
    print("Camera initialized")

@app.route('/')
def index():
    return '<html><body><img src="/video_feed"></body></html>'

@app.route('/video_feed')
def video_feed():
    def generate():
        while True:
            frame = picam2.capture_array()
            if len(frame.shape) == 3:
                frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            ret, buffer = cv2.imencode('.jpg', frame)
            if ret:
                yield (b'--frame\r\n'
                      b'Content-Type: image/jpeg\r\n\r\n' + 
                      buffer.tobytes() + b'\r\n')
            time.sleep(0.1)
    
    return Response(generate(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    init_camera()
    app.run(host='0.0.0.0', port=5001, debug=True)
EOF

chmod +x test_camera_stream.py
python3 test_camera_stream.py
Then open http://localhost:5001 in a browser to see if the camera works.







