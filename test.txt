# Fix 1: Add the missing play_beep and play_laughing methods
def play_beep(self):
    """Play beep sound"""
    try:
        with self.audio_recording_lock:
            subprocess.run(["aplay", BEEP_SOUND], check=True, capture_output=True, timeout=5)
            self.emit_log("üîî Beep sound played", 'debug')
    except subprocess.CalledProcessError as e:
        self.emit_log(f"üîá Beep sound failed: {e}", 'warning')
    except Exception as e:
        self.emit_log(f"üîá Beep error: {e}", 'warning')

def play_laughing(self):
    """Play laughing sound"""
    try:
        with self.audio_recording_lock:
            subprocess.run(["aplay", LAUGHING_SOUND], check=True, capture_output=True, timeout=10)
            self.emit_log("üòÑ Laughing sound played", 'debug')
    except subprocess.CalledProcessError as e:
        self.emit_log(f"üîá Laughing sound failed: {e}", 'warning')
    except Exception as e:
        self.emit_log(f"üîá Laughing error: {e}", 'warning')

# Fix 2: Update load_response_files method to load ALL response files properly
def load_response_files(self):
    """Load all response files from disk"""
    try:
        # Load jokes
        try:
            with open(JOKES_FILE, 'r') as f:
                self.jokes = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_jokes()

        # Load fun facts
        try:
            with open(FUN_FACTS_FILE, 'r') as f:
                self.fun_facts = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_fun_facts()

        # Load greeting responses
        try:
            with open(GREETING_RESPONSES_FILE, 'r') as f:
                self.greeting_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_greeting_responses()

        # Load listening responses
        try:
            with open(LISTENING_RESPONSES_FILE, 'r') as f:
                self.listening_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_listening_responses()

        # Load waiting responses
        try:
            with open(WAITING_RESPONSES_FILE, 'r') as f:
                self.waiting_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_waiting_responses()

        # Load warning responses
        try:
            with open(WARNING_RESPONSES_FILE, 'r') as f:
                self.warning_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_warning_responses()

        # Load bored responses
        try:
            with open(BORED_RESPONSES_FILE, 'r') as f:
                self.bored_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_bored_responses()

        # Load visitor greeting responses
        try:
            with open(VISITOR_GREETING_RESPONSES_FILE, 'r') as f:
                self.visitor_greeting_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_visitor_responses()

        # Load generic bored responses
        try:
            with open(BORED_RESPONSES_GENERIC_FILE, 'r') as f:
                self.bored_responses_generic = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_bored_responses_generic()

        # Load generic waiting responses
        try:
            with open(WAITING_RESPONSES_GENERIC_FILE, 'r') as f:
                self.waiting_responses_generic = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_waiting_responses_generic()

        self.emit_log("üìÅ Response files loaded successfully", 'success')
        return True

    except Exception as e:
        self.emit_log(f"‚ùå Failed to load response files: {e}", 'error')
        self.create_default_responses()
        return False

# Fix 3: Add missing default response creation methods
def create_default_jokes(self):
    """Create default jokes file"""
    default_jokes = [
        "Why don't scientists trust atoms? Because they make up everything!",
        "Why don't eggs tell jokes? They'd crack each other up!",
        "Why don't scientists trust stairs? Because they're always up to something!",
        "What do you call a fake noodle? An impasta!",
        "Why did the scarecrow win an award? He was outstanding in his field!"
    ]
    try:
        with open(JOKES_FILE, 'w') as f:
            for joke in default_jokes:
                f.write(joke + '\n')
        self.jokes = default_jokes
    except Exception as e:
        self.jokes = default_jokes

def create_default_greeting_responses(self):
    """Create default greeting responses file"""
    default_greetings = [
        "Hello {name}! It is nice to see you again. How may I help you?",
        "Hey {name}! Good to see you, buddy! What's up?",
        "Hi there {name}! Welcome back! How can I assist you today?",
        "Great to see you {name}! What can I do for you?",
        "Hello {name}! Always a pleasure to see you. What's on your mind?"
    ]
    try:
        with open(GREETING_RESPONSES_FILE, 'w') as f:
            for response in default_greetings:
                f.write(response + '\n')
        self.greeting_responses = default_greetings
    except Exception as e:
        self.greeting_responses = default_greetings

def create_default_listening_responses(self):
    """Create default listening responses file"""
    default_listening = [
        "Yes {name}, I'm listening. What would you like to know?",
        "I'm here {name}, what can I help you with?",
        "Go ahead {name}, I'm all ears!",
        "What's on your mind {name}?",
        "I'm ready to help {name}. What do you need?"
    ]
    try:
        with open(LISTENING_RESPONSES_FILE, 'w') as f:
            for response in default_listening:
                f.write(response + '\n')
        self.listening_responses = default_listening
    except Exception as e:
        self.listening_responses = default_listening

def create_default_waiting_responses(self):
    """Create default waiting responses file"""
    default_waiting = [
        "Hey {name}, I am still here if you need anything",
        "I'm still around {name}, just let me know if you need help",
        "Still here waiting to assist you {name}",
        "I'm patiently waiting for your next request {name}",
        "Standing by if you need me {name}"
    ]
    try:
        with open(WAITING_RESPONSES_FILE, 'w') as f:
            for response in default_waiting:
                f.write(response + '\n')
        self.waiting_responses = default_waiting
    except Exception as e:
        self.waiting_responses = default_waiting

def create_default_warning_responses(self):
    """Create default warning responses file"""
    default_warnings = [
        "Attention unauthorized person, you are not authorized to access this property. Leave immediately. I am contacting the authorities to report your intrusion.",
        "Warning! You are trespassing on private property. Please leave immediately or authorities will be contacted.",
        "This is a restricted area. You do not have permission to be here. Please leave now.",
        "Security alert! Unauthorized person detected. Please vacate the premises immediately."
    ]
    try:
        with open(WARNING_RESPONSES_FILE, 'w') as f:
            for response in default_warnings:
                f.write(response + '\n')
        self.warning_responses = default_warnings
    except Exception as e:
        self.warning_responses = default_warnings

# Fix 4: Update greet_person method to use file-based responses
def greet_person(self, name):
    """Greet a detected person using responses from greeting_responses.txt file"""
    current_time = time.time()
    
    # Check if we should greet this person (cooldown check)
    if name in self.last_greeting_time:
        time_since_last = current_time - self.last_greeting_time[name]
        if time_since_last < GREETING_COOLDOWN:
            self.emit_log(f"‚è≥ Skipping greeting for {name} - cooldown active ({time_since_last:.1f}s < {GREETING_COOLDOWN}s)", 'debug')
            return False

    # Select greeting from file-based responses
    if self.greeting_responses:
        greeting_template = random.choice(self.greeting_responses)
        greeting = greeting_template.replace("{name}", name)
        self.emit_log(f"üé≠ Selected greeting template: {greeting_template[:50]}...", 'debug')
    else:
        greeting = f"Hey {name}! Good to see you, buddy! What's up?"
        self.emit_log("‚ö†Ô∏è Using fallback greeting - no templates loaded", 'warning')

    self.speak_text(greeting)
    self.emit_conversation(f"üëã Greeted {name}: {greeting}", 'response')
    
    self.last_greeting_time[name] = current_time
    self.last_interaction_time = current_time
    
    # Enable wake word detection after greeting
    self.wake_word_active = True
    self.last_bored_response_time = current_time  # Reset bored response timer
    self.bored_cycle = 0  # Reset bored cycle
    
    self.emit_log(f"‚úÖ Greeted {name} - Wake word detection now active", 'success')
    return True

# Fix 5: Update handle_unknown_person method to use file-based responses
def handle_unknown_person(self, frame, confidence):
    """Handle unknown person detection with time-based responses using file-based responses"""
    if self.is_daytime_hours():
        # 6:00AM - 12:00PM: Assume visitor, be friendly
        if self.visitor_greeting_responses:
            visitor_greeting = random.choice(self.visitor_greeting_responses)
            self.emit_log(f"üåÖ Selected daytime visitor greeting from file", 'debug')
        else:
            visitor_greeting = "Hello. I do not recognize you. Can I be of assistance?"
            self.emit_log("‚ö†Ô∏è Using fallback visitor greeting - no templates loaded", 'warning')
            
        self.speak_text(visitor_greeting)
        self.emit_conversation(f"üë§ Unknown visitor greeted: {visitor_greeting}", 'response')
        self.emit_log("üåû Unknown person detected during daytime - treated as visitor", 'warning')
    else:
        # 12:01PM - 5:59AM: Assume intruder, give warning
        if self.warning_responses:
            warning = random.choice(self.warning_responses)
            self.emit_log(f"üåô Selected nighttime warning from file", 'debug')
        else:
            warning = "Attention unauthorized person, you are not authorized to access this property. Leave immediately. I am contacting the authorities to report your intrusion."
            self.emit_log("‚ö†Ô∏è Using fallback warning - no templates loaded", 'warning')
            
        self.speak_text(warning)
        self.emit_conversation(f"üö® Intruder warning: {warning}", 'response')
        self.emit_log("üåö Unknown person detected during nighttime/evening - treated as intruder", 'error')

    # Save security photo and send alert regardless of time
    photo_path = self.save_security_photo(frame, "Unknown", confidence)
    self.send_telegram_alert("Unknown", confidence, photo_path)

