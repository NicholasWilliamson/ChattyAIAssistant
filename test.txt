

Fix 1 - Modify the start_system() method to not start wake word detection immediately:

def start_system(self):
    """Start the AI system"""
    if self.is_running:
        return False
    
    self.emit_log("Starting Chatty AI system...", 'info')
    
    # Verify models are loaded
    if not self.whisper_model or not self.llama_model:
        self.emit_log("Models not loaded - attempting to reload...", 'warning')
        if not self.preload_models():
            self.emit_log("Failed to load models - cannot start system", 'error')
            return False
    
    # Verify camera is ready
    if not self.picam2:
        self.emit_log("Camera not initialized - attempting to setup...", 'warning')
        if not self.setup_camera():
            self.emit_log("Failed to setup camera - cannot start system", 'error')
            return False
    
    self.is_running = True
    
    # Start ONLY camera monitoring thread - wake word thread starts after person detection
    self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
    self.camera_thread.start()
    
    # Note: wake word thread will be started by greet_person() method after facial recognition
    
    self.emit_log("Chatty AI system started successfully", 'success')
    return True


Fix 2 - Modify the greet_person() method to start wake word thread:

def greet_person(self, name):
    """Greet a detected person - Same as original"""
    current_time = time.time()
    
    # Check if we should greet this person (cooldown check)
    if name in self.last_greeting_time:
        time_since_last = current_time - self.last_greeting_time[name]
        if time_since_last < GREETING_COOLDOWN:
            return False
    
    # Use generic greeting with person's name
    if self.greeting_responses:
        greeting_template = random.choice(self.greeting_responses)
        greeting = greeting_template.replace("{name}", name)
    else:
        greeting = f"Hey {name}! Good to see you, buddy! What's up?"
    
    self.speak_text(greeting)
    self.last_greeting_time[name] = current_time
    self.last_interaction_time = current_time
    
    # Enable wake word detection after greeting
    self.wake_word_active = True
    self.last_bored_response_time = current_time
    self.bored_cycle = 0
    
    # Start wake word thread if not already running
    if not self.audio_thread or not self.audio_thread.is_alive():
        self.audio_thread = threading.Thread(target=self.listen_for_wake_word, daemon=True)
        self.audio_thread.start()
        self.emit_log("Wake word detection thread started after greeting", 'success')
    
    self.emit_log(f"Greeted {name} - Wake word detection now active", 'success')
    return True


Fix 3 - Add a route to check web page loading and serve static files:

# Add these routes after your existing routes

@app.route('/templates/<path:filename>')
def serve_template_files(filename):
    """Serve template files like logos"""
    try:
        return app.send_static_file(f'templates/{filename}')
    except:
        return '', 404

@app.route('/health')
def health_check():
    """Health check endpoint to verify server is fully loaded"""
    return jsonify({
        'status': 'ok',
        'server_loaded': True,
        'models_preloaded': chatty_ai.whisper_model is not None and chatty_ai.llama_model is not None,
        'camera_ready': chatty_ai.picam2 is not None,
        'timestamp': datetime.now().strftime("%I:%M:%S %p")
    })

@app.route('/static/<path:filename>')
def serve_static(filename):
    """Serve static files"""
    return app.send_static_file(filename)


Fix 4 - Check your HTML template logo paths:

In your Chatty_AI_HighTech.html, make sure the logo paths are correct:

<!-- Change from: -->
<img src="/templates/Chatty_AI_logo.png" alt="Chatty AI Logo">
<img src="/templates/diamond_coding_logo.png" alt="Diamond Coding Logo">

<!-- To: -->
<img src="/templates/Chatty_AI_logo.png" alt="Chatty AI Logo" onload="console.log('Logo loaded')" onerror="console.log('Logo failed to load')">
<img src="/templates/diamond_coding_logo.png" alt="Diamond Coding Logo" onload="console.log('Company logo loaded')" onerror="console.log('Company logo failed to load')">


Fix 5 - Add JavaScript to check page load status in your HTML:

Add this to the bottom of your HTML template:

// Add this to your HTML template at the bottom, just before closing </body>
window.addEventListener('load', function() {
    console.log('Page fully loaded');
    // Check if images loaded
    const images = document.querySelectorAll('img');
    let loadedCount = 0;
    images.forEach(img => {
        if (img.complete) {
            loadedCount++;
        }
    });
    console.log(`${loadedCount} of ${images.length} images loaded`);
});

// Check server health after page load
setTimeout(() => {
    fetch('/health')
        .then(response => response.json())
        .then(data => {
            console.log('Server health check:', data);
        })
        .catch(error => {
            console.log('Server health check failed:', error);
        });
}, 2000);


To test the fixes:

Apply the code changes

Restart your Raspberry Pi

Open browser developer tools (F12) and check the Console tab

Look for any error messages about missing files

Visit http://localhost:5000/health to check server status

This should fix both issues: wake word detection will only start after facial recognition, and you can debug why the logos aren't loading.


