# Test audio output first
cvlc --aout=alsa --alsa-audio-device=hw:0,0 /home/nickspi5/Chatty_AI/Chatty_AI_starting.mp4

# If no audio, try the other HDMI port
cvlc --aout=alsa --alsa-audio-device=hw:1,0 /home/nickspi5/Chatty_AI/Chatty_AI_starting.mp4

# Or use default audio
cvlc /home/nickspi5/Chatty_AI/Chatty_AI_starting.mp4


3. Fix Camera in Main Application
The issue is that your camera monitoring loop has duplicate camera initialization. When you click "Initialize", it's calling setup_camera() twice:
python# In your handle_start_system, you have:
if not self.setup_camera():  # First call
    # error handling
    return

# Then later:
if self.setup_camera():  # Second call - THIS IS THE PROBLEM!
    self.emit_log("Camera initialized, starting monitoring thread...", 'info')
Fix it by removing the duplicate:
python# In handle_start_system, replace the duplicate with:
# Setup camera
if not self.setup_camera():
    emit('status_update', {
        'status': 'error',
        'is_running': False,
        'message': 'Failed to initialize camera'
    })
    return

# Camera is already set up, just verify and start monitoring
self.emit_log("Camera initialized, starting monitoring thread...", 'info')

# Make sure these are set BEFORE starting threads
self.system_running = True
self.monitor_running = True

# Start camera monitoring thread
self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
self.camera_thread.start()
self.emit_log("Camera monitoring thread started", 'success')

# Give camera time to capture first frame
time.sleep(2)

# Check if frame is being captured
if self.current_frame is not None:
    self.emit_log("Camera is capturing frames", 'success')
else:
    self.emit_log("Warning: Camera not capturing frames yet", 'warning')
4. Fix RGBA to BGR Conversion
Your camera is outputting RGBA (4 channels) but your code expects RGB (3 channels):
pythondef camera_monitoring_loop(self):
    # ... existing code ...
    
    frame = self.picam2.capture_array()
    
    # Debug log
    if frame_count % 30 == 0:
        self.emit_log(f"Captured frame {frame_count}, shape: {frame.shape}", 'debug')
    
    # Convert based on actual format
    if len(frame.shape) == 3:
        if frame.shape[2] == 4:  # RGBA
            frame = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)
        elif frame.shape[2] == 3:  # RGB
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
5. Complete Auto-Start Setup
To make everything automatic on boot:
bash# Enable all services in correct order
sudo systemctl enable chatty-ai-preloader.service
sudo systemctl enable chatty-ai.service
sudo systemctl enable chatty-ai-launcher.service

# Check service order
systemctl list-dependencies chatty-ai-launcher.service
6. Quick Fix Script
Here's a complete fix script to run:
bashcat > /home/nickspi5/Chatty_AI/fix_camera.sh << 'EOF'
#!/bin/bash
echo "Fixing Chatty AI camera issues..."

# Stop all services
echo "Stopping services..."
sudo systemctl stop chatty-ai-launcher.service
sudo systemctl stop chatty-ai.service  
sudo systemctl stop chatty-ai-preloader.service
pkill -f chromium
pkill -f python3

sleep 2

# Restart in correct order
echo "Starting services..."
sudo systemctl start chatty-ai-preloader.service
sleep 5
sudo systemctl start chatty-ai.service
sleep 5

echo "Services restarted. Testing camera..."

# Test if port 5000 is open
if netstat -tuln | grep -q ":5000 "; then
    echo "Port 5000 is open"
    
    # Test video feed
    curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/video_feed
    
    echo "Opening browser..."
    chromium-browser http://localhost:5000 &
else
    echo "Port 5000 is not open - service may not be running"
fi
EOF

chmod +x /home/nickspi5/Chatty_AI/fix_camera.sh
./fix_camera.sh
After making these changes, reboot and the system should:

Boot up
Start preloader service
Start main Chatty AI service
Play video with audio
Launch browser in kiosk mode
Show working camera feed when you click Initialize

The main issue was the duplicate setup_camera() call causing the camera to be already in use.




