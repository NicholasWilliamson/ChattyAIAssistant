Thank you, Claude,

I ran: (chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ grep -n -A 10 -B 5 "picam2.*start\|camera.*start\|initialize.*cam" chatty_ai.py
358-        try:
359-            self.picam2 = Picamera2()
360-            self.picam2.configure(self.picam2.create_preview_configuration(
361-                main={"format": 'XRGB8888', "size": (640, 480)}
362-            ))
363:            self.picam2.start()
364-            time.sleep(2)  # Camera warm-up
365-            self.camera_initialized = True
366-            self.emit_log("Camera initialized successfully", 'success')
367-            return True
368-        except Exception as e:
369:            self.emit_log(f"Failed to initialize camera: {e}", 'error')
370-            return False
371-
372-    def get_system_info(self):
373-        """Get current system performance information"""
374-        try:
375-            # Get CPU and memory info
376-            cpu_percent = psutil.cpu_percent(interval=1)
377-            memory = psutil.virtual_memory()
378-            memory_percent = memory.percent
379-            memory_used = memory.used
--
389-                'memory_used': memory_used,
390-                'memory_total': memory_total,
391-                'cpu_temp': round(cpu_temp, 2) if cpu_temp else 0,
392-                'gpu_temp': round(gpu_temp, 1) if gpu_temp else 0,
393-                'timestamp': datetime.now().isoformat(),
394:                'camera_initialized': self.camera_initialized,
395-                'models_loaded': self.models_loaded,
396-                'wake_word_active': self.wake_word_active,
397-                'current_person': self.current_person if self.current_person else "No person detected"
398-            }
399-        except Exception as e:
400-            logger.error(f"Error getting system info: {e}")
401-            return {
402-                'cpu_percent': 0,
403-                'memory_percent': 0,
404-                'memory_used': 0,
--
657-                    # Setup camera
658-                    if not self.setup_camera():
659-                        emit('status_update', {
660-                            'status': 'error',
661-                            'is_running': False,
662:                            'message': 'Failed to initialize camera'
663-                        })
664-                        return
665-                    
666-                    # Start system monitoring
667-                    if not self.monitor_running:
668-                        self.monitor_running = True
669-                        self.system_monitor_thread = threading.Thread(
670-                            target=self.system_monitor_loop, daemon=True)
671-                        self.system_monitor_thread.start()
672-                        logger.info("System monitoring thread started")
673-                    
674-                    # Start camera monitoring
675-                    self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
676:                    self.camera_thread.start()
677-                    
678-                    # Start wake word detection
679-                    self.audio_thread = threading.Thread(target=self.listen_for_wake_word, daemon=True)
680-                    self.audio_thread.start()
681-                    
682-                    self.system_running = True
683-                    self.emit_log("Chatty AI system started successfully", 'success')
684-                    
685-                    response_data = {
686-                        'status': 'running',
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ grep -n -A 20 -B 5 "def.*monitor|\monitor.*thread" chatty_ai.py
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ grep -n -A 20 -B 5 "def.*monitor\|monitor.*thread" chatty_ai.py 
172-        self.telegram_chat_id = None
173-        
174-        # Threading
175-        self.camera_thread = None
176-        self.audio_thread = None
177:        self.system_monitor_thread = None
178-        self.monitor_running = False
179-        
180-        # Initialize directories and logging
181-        self.setup_directories()
182-        self.setup_ai_logging()
183-        
184-        # Setup routes and socket events
185-        self.setup_routes()
186-        self.setup_socket_events()
187-        
188-        logger.info("ChattyAI Web Server initialized")
189-
190-    def setup_directories(self):
191-        """Create necessary directories"""
192-        os.makedirs(SECURITY_PHOTOS_DIR, exist_ok=True)
193-        os.makedirs(SECURITY_LOGS_DIR, exist_ok=True)
194-        os.makedirs('logs', exist_ok=True)  # For web server logs
195-
196-    def setup_ai_logging(self):
197-        """Setup logging for AI detections"""
--
478-        }
479-        
480-        if self.clients:
481-            self.socketio.emit('conversation_update', conv_entry)
482-
483:    def system_monitor_loop(self):
484-        """Background thread for system monitoring"""
485-        while self.monitor_running:
486-            try:
487-                if self.clients:  # Only send if there are connected clients
488-                    system_info = self.get_system_info()
489-                    self.socketio.emit('system_info', system_info)
490-                
491-                time.sleep(5)  # Update every 5 seconds
492-            except Exception as e:
493-                logger.error(f"Error in system monitor loop: {e}")
494-                time.sleep(5)
495-
496-    def setup_routes(self):
497-        """Setup Flask routes"""
498-        
499-        @self.app.route('/')
500-        def index():
501-            """Main page"""
502-            try:
503-                return render_template('Chatty_AI.html')
--
664-                        return
665-                    
666-                    # Start system monitoring
667-                    if not self.monitor_running:
668-                        self.monitor_running = True
669:                        self.system_monitor_thread = threading.Thread(
670-                            target=self.system_monitor_loop, daemon=True)
671:                        self.system_monitor_thread.start()
672:                        logger.info("System monitoring thread started")
673-                    
674-                    # Start camera monitoring
675-                    self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
676-                    self.camera_thread.start()
677-                    
678-                    # Start wake word detection
679-                    self.audio_thread = threading.Thread(target=self.listen_for_wake_word, daemon=True)
680-                    self.audio_thread.start()
681-                    
682-                    self.system_running = True
683-                    self.emit_log("Chatty AI system started successfully", 'success')
684-                    
685-                    response_data = {
686-                        'status': 'running',
687-                        'is_running': True,
688-                        'message': 'Chatty AI system started successfully'
689-                    }
690-                    
691-                    # Send to all clients
692-                    self.socketio.emit('status_update', response_data)
--
1347-                self.emit_log(f"Wake word detection error: {e}", 'error')
1348-                time.sleep(2.0)
1349-        
1350-        self.emit_log("Wake word detection thread stopped", 'info')
1351-
1352:    def camera_monitoring_loop(self):
1353-        """Main camera monitoring loop for web interface"""
1354:        self.emit_log("Camera monitoring thread started", 'success')
1355-        
1356-        while self.system_running:
1357-            try:
1358-                if not self.picam2:
1359-                    time.sleep(1)
1360-                    continue
1361-                    
1362-                frame = self.picam2.capture_array()
1363-                
1364-                # Convert from RGB to BGR for OpenCV
1365-                if len(frame.shape) == 3 and frame.shape[2] == 3:
1366-                    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
1367-                
1368-                # Process facial recognition
1369-                name, face_location, confidence = self.detect_faces(frame)
1370-                
1371-                current_time = time.time()
1372-                
1373-                # Draw face rectangles and labels on frame for web display
1374-                display_frame = frame.copy()
--
1494-                
1495-            except Exception as e:
1496-                self.emit_log(f"Camera loop error: {e}", 'error')
1497-                time.sleep(1)
1498-        
1499:        self.emit_log("Camera monitoring thread stopped", 'info')
1500-
1501-    def signal_handler(self, sig, frame):
1502-        """Handle shutdown signals"""
1503-        logger.info("Shutdown signal received")
1504-        self.cleanup()
1505-        sys.exit(0)
1506-
1507-    def cleanup(self):
1508-        """Clean up resources"""
1509-        logger.info("Cleaning up resources...")
1510-        self.system_running = False
1511-        self.monitor_running = False
1512-        
1513-        # Stop camera
1514-        if self.picam2:
1515-            try:
1516-                self.picam2.stop()
1517-                logger.info("Camera stopped")
1518-            except:
1519-                pass
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ python3 camera_fix.py
Camera state reset complete
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ grep -n -A 15 -B 5 "picam2" chatty_ai.py | head -30
136-        # Facial Recognition
137-        self.known_encodings = []
138-        self.known_names = []
139-        
140-        # Camera
141:        self.picam2 = None
142-        self.current_frame = None
143-        self.captured_person_frame = None
144-        
145-        # System state
146-        self.system_running = False
147-        self.clients = set()
148-        self.camera_initialized = False
149-        self.models_loaded = False
150-        self.wake_word_active = False
151-        
152-        # AI Assistant state
153-        self.current_person = None
154-        self.last_greeting_time = {}
155-        self.last_interaction_time = None
156-        self.person_absent_since = None
--
354-            return False
355-
356-    def setup_camera(self):
357-        """Initialize camera"""
358-        try:
359:            self.picam2 = Picamera2()
360:            self.picam2.configure(self.picam2.create_preview_configuration(
361-                main={"format": 'XRGB8888', "size": (640, 480)}
(chatty-venv) nickspi5@raspberrypi1:~/Chatty_AI $ 













