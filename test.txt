

You're right! The jokes and fun facts should come from the text files, not the LLM. Let me fix this to match your original terminal version.


Fix 1 - Add fun_facts.txt to the file loading:

First, add the fun facts file constant at the top with your other file constants:

# Response files
JOKES_FILE = "jokes.txt"
FUN_FACTS_FILE = "fun_facts.txt"  # Add this line
LISTENING_RESPONSES_FILE = "listening_responses.txt"
WAITING_RESPONSES_FILE = "waiting_responses.txt"
WARNING_RESPONSES_FILE = "warning_responses.txt"
GREETING_RESPONSES_FILE = "greeting_responses.txt"
BORED_RESPONSES_FILE = "bored_responses.txt"
VISITOR_GREETING_RESPONSES_FILE = "visitor_greeting_responses.txt"


Fix 2 - Add fun_facts list to the __init__ method:

In your __init__ method, add this line with your other response lists:

# Response lists
self.jokes = []
self.fun_facts = []  # Add this line
self.listening_responses = []
self.waiting_responses = []
self.warning_responses = []
self.greeting_responses = []
self.bored_responses = []
self.visitor_greeting_responses = []


Fix 3 - Update the load_response_files method:

Add fun facts loading to your load_response_files method:

def load_response_files(self):
    """Load response text files - Same as original"""
    try:
        with open(JOKES_FILE, 'r') as f:
            self.jokes = [line.strip() for line in f if line.strip()]
        
        # Add fun facts loading
        try:
            with open(FUN_FACTS_FILE, 'r') as f:
                self.fun_facts = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            # Create default fun facts if file doesn't exist
            self.fun_facts = [
                "Did you know that octopuses have three hearts and blue blood?",
                "A group of flamingos is called a flamboyance!",
                "Honey never spoils - archaeologists have found edible honey in ancient Egyptian tombs!",
                "Bananas are berries, but strawberries aren't!",
                "A shrimp's heart is in its head!"
            ]
            self.emit_log("Created default fun facts", 'info')
        
        with open(LISTENING_RESPONSES_FILE, 'r') as f:
            self.listening_responses = [line.strip() for line in f if line.strip()]
            
        with open(GREETING_RESPONSES_FILE, 'r') as f:
            self.greeting_responses = [line.strip() for line in f if line.strip()]
            
        with open(WAITING_RESPONSES_FILE, 'r') as f:
            self.waiting_responses = [line.strip() for line in f if line.strip()]
        
        with open(WARNING_RESPONSES_FILE, 'r') as f:
            self.warning_responses = [line.strip() for line in f if line.strip()]
        
        # Load bored responses
        try:
            with open(BORED_RESPONSES_FILE, 'r') as f:
                self.bored_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_bored_responses()
        
        # Load visitor greeting responses
        try:
            with open(VISITOR_GREETING_RESPONSES_FILE, 'r') as f:
                self.visitor_greeting_responses = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            self.create_default_visitor_responses()
            
        self.emit_log("Response files loaded successfully", 'success')
    except FileNotFoundError as e:
        self.emit_log(f"Response file not found: {e}", 'error')
        self.create_default_responses()


Fix 4 - Replace the LLM-based joke and fun fact methods with file-based ones:

Replace your get_llm_joke() and get_llm_fun_fact() methods with these:

def get_joke_from_file(self):
    """Get a random joke from jokes.txt file"""
    try:
        if self.jokes:
            joke = random.choice(self.jokes)
            self.emit_log(f"Selected joke from file: {joke[:30]}...", 'debug')
            return joke
        else:
            return "Why don't scientists trust atoms? Because they make up everything!"
    except Exception as e:
        self.emit_log(f"Error getting joke from file: {e}", 'error')
        return "Why don't scientists trust atoms? Because they make up everything!"

def get_fun_fact_from_file(self):
    """Get a random fun fact from fun_facts.txt file"""
    try:
        if self.fun_facts:
            fact = random.choice(self.fun_facts)
            self.emit_log(f"Selected fun fact from file: {fact[:30]}...", 'debug')
            return fact
        else:
            return "Did you know that octopuses have three hearts and blue blood?"
    except Exception as e:
        self.emit_log(f"Error getting fun fact from file: {e}", 'error')
        return "Did you know that octopuses have three hearts and blue blood?"


Fix 5 - Update the check_for_bored_response method to use file-based content:

Replace your current check_for_bored_response method with:

def check_for_bored_response(self, name):
    """Check if it's time to give a bored response with joke or fun fact from files"""
    if not self.wake_word_active or not self.last_bored_response_time:
        return False
    
    current_time = time.time()
    time_since_bored = current_time - self.last_bored_response_time
    
    if time_since_bored >= BORED_RESPONSE_INTERVAL:
        if self.bored_cycle == 0:
            # Give bored response + joke from file
            if self.bored_responses:
                bored_template = random.choice(self.bored_responses)
                bored_msg = bored_template.replace("{name}", name)
            else:
                bored_msg = f"Yo {name}, still hanging around here waiting for you, dude!"
            
            joke = self.get_joke_from_file()
            # Create complete message with 2-second pause represented as spoken text
            full_message = f"{bored_msg} Let me tell you a joke! ... ... {joke}"
            self.speak_text(full_message)
            self.emit_conversation(f"Bored response with joke: {joke}", 'info')
            self.bored_cycle = 1
            self.emit_log(f"Gave {name} a bored response with joke from file", 'info')
        else:
            # Give waiting response + fun fact from file
            if self.waiting_responses:
                waiting_template = random.choice(self.waiting_responses)
                waiting_msg = waiting_template.replace("{name}", name)
            else:
                waiting_msg = f"I am still around if you need me, {name}"
            
            fun_fact = self.get_fun_fact_from_file()
            # Create complete message with 2-second pause represented as spoken text
            full_message = f"{waiting_msg} Let me tell you a fun fact! ... ... {fun_fact}"
            self.speak_text(full_message)
            self.emit_conversation(f"Waiting response with fun fact: {fun_fact}", 'info')
            self.bored_cycle = 0
            self.emit_log(f"Gave {name} a waiting response with fun fact from file", 'info')
        
        self.last_bored_response_time = current_time
        return True
    
    return False


Fix 6 - Update the create_default_responses method to include fun facts:

def create_default_responses(self):
    """Create default responses if files are missing"""
    self.jokes = ["Why don't scientists trust atoms? Because they make up everything!"]
    self.fun_facts = ["Did you know that octopuses have three hearts and blue blood?"]  # Add this line
    self.greeting_responses = ["Hey {name}! Good to see you, buddy! What's up?"]
    self.listening_responses = ["Yes {name}, I'm listening. What would you like to know?"]
    self.waiting_responses = ["I am still around if you need me, {name}"]
    self.warning_responses = ["Attention unauthorized person, you are not authorized to access this property. Leave immediately."]
    self.bored_responses = ["I'm getting a bit bored waiting here"]
    self.visitor_greeting_responses = ["Hello. I do not recognize you. Can I be of assistance?"]

Now the jokes and fun facts will come from your jokes.txt and fun_facts.txt files exactly like your original terminal version, rather than being generated by the LLM. Make sure you have a fun_facts.txt file in your Chatty_AI directory with your fun facts, one per line.


