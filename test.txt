

@self.socketio.on('start_system')
def handle_start_system():
    """Handle start system request"""
    client_id = request.sid
    logger.info(f"Received start system request from client: {client_id}")
    
    try:
        if not self.system_running:
            self.emit_log("Starting Chatty AI system...", 'info')
            
            # Load response files
            if not self.load_response_files():
                emit('status_update', {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Failed to load response files'
                })
                return
            
            # Load AI models
            if not self.load_models():
                emit('status_update', {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Failed to load AI models'
                })
                return
            
            # Load face encodings
            if not self.load_encodings():
                emit('status_update', {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Failed to load face encodings'
                })
                return
            
            # Load Telegram config
            self.load_telegram_config()

            # Setup camera
            if not self.setup_camera():
                emit('status_update', {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Failed to initialize camera'
                })
                return

            # Test direct capture
            if self.test_camera_direct():
                self.emit_log("‚úÖ Direct camera capture works", 'success')
            else:
                self.emit_log("‚ùå Direct camera capture failed", 'error')

            # CRITICAL: Set these flags BEFORE starting any threads
            self.system_running = True
            self.monitor_running = True
            
            self.emit_log("Starting monitoring threads...", 'info')

            # Start system monitoring thread (only if not already running)
            if not hasattr(self, 'system_monitor_thread') or not self.system_monitor_thread.is_alive():
                self.system_monitor_thread = threading.Thread(
                    target=self.system_monitor_loop, daemon=True)
                self.system_monitor_thread.start()
                logger.info("System monitoring thread started")
                self.emit_log("System monitoring thread started", 'success')
            
            # Start camera monitoring thread (ONLY ONCE!)
            self.camera_thread = threading.Thread(target=self.camera_monitoring_loop, daemon=True)
            self.camera_thread.start()
            self.emit_log("Camera monitoring thread started", 'success')
            
            # Verify camera thread is running
            time.sleep(0.5)
            if self.camera_thread.is_alive():
                self.emit_log(f"‚úÖ Camera thread is alive", 'success')
            else:
                self.emit_log("‚ùå Camera thread failed to start!", 'error')
            
            # Give camera time to capture first frames
            time.sleep(2)
            
            # Detailed diagnostic check
            if self.current_frame is not None:
                self.emit_log(f"‚úÖ Camera is capturing frames - shape: {self.current_frame.shape}", 'success')
            else:
                self.emit_log("‚ö†Ô∏è Camera not capturing frames yet", 'warning')
                
                # Diagnose why frames aren't being captured
                if not self.picam2:
                    self.emit_log("‚ùå picam2 is None!", 'error')
                if not self.system_running:
                    self.emit_log("‚ùå system_running is False!", 'error')
                if not self.monitor_running:
                    self.emit_log("‚ùå monitor_running is False!", 'error')
                    
                # Try another direct capture as a test
                try:
                    if self.picam2:
                        test_frame = self.picam2.capture_array()
                        self.emit_log(f"üîç Direct test capture: {test_frame.shape}", 'info')
                        
                        # Force set a frame if capture works
                        if len(test_frame.shape) == 3 and test_frame.shape[2] == 4:
                            test_frame = cv2.cvtColor(test_frame, cv2.COLOR_RGBA2BGR)
                        self.current_frame = test_frame
                        self.emit_log("üîß Forced frame update from direct capture", 'warning')
                except Exception as e:
                    self.emit_log(f"‚ùå Emergency capture failed: {e}", 'error')
            
            # Start wake word detection thread
            self.audio_thread = threading.Thread(target=self.listen_for_wake_word, daemon=True)
            self.audio_thread.start()
            self.emit_log("Wake word detection thread started", 'success')
            
            # Final success message
            self.emit_log("‚ú® Chatty AI system started successfully", 'success')
            
            response_data = {
                'status': 'running',
                'is_running': True,
                'message': 'Chatty AI system started successfully'
            }
            
            # Send to all clients
            self.socketio.emit('status_update', response_data)
            logger.info("System started successfully - status sent to all clients")
            
        else:
            emit('status_update', {
                'status': 'running',
                'is_running': True,
                'message': 'System is already running'
            })
            logger.info("Start system requested but system already running")
            self.emit_log("System is already running", 'info')
            
    except Exception as e:
        logger.error(f"Error starting system: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # Reset state on error
        self.system_running = False
        self.monitor_running = False
        
        emit('status_update', {
            'status': 'error',
            'is_running': False,
            'message': f'Error starting system: {e}'
        })
        
        self.emit_log(f"‚ùå System start failed: {e}", 'error')




